pipeline {
    agent any
    parameters {
        string(name: 'Git_Repo', defaultValue: '')
    }
    stages {
        stage('checkout script') {
            steps {
                script {
                    dir('script') {
                        // Define repository URLs and branches
                        def np_repo = 'https://github.com/nik786/git-test-2.git'
                        def np_branch = 'release/1.0'
                        def prod_repo = 'https://github.com/nik786/hello-tomcat-project-2.git'
                        def prod_branch = 'release/1.0'
                        def np_app_file = 'app-np.properties'
                        def prod_app_file = 'app-prod.properties'

                        // Clean the workspace
                        cleanWs()

                        // Create directories for the repositories
                        sh "mkdir -p $WORKSPACE/np"
                        sh "mkdir -p $WORKSPACE/pd"
                        checkout([$class: 'GitSCM', branches: [[name: '*/release/1.0']], userRemoteConfigs: [[url: np_repo]]])

                        // Clone the first repository and switch to the specified branch
                        sh "cd $WORKSPACE/np && git clone $np_repo . && git checkout $np_branch"

                        // Clone the second repository and switch to the specified branch
                        sh "cd $WORKSPACE/pd && git clone $prod_repo . && git checkout $prod_branch"
                    }
                }
            }
        }

        stage("config repo") {
            steps {
                script {
                    dir('config') {
                        sh "echo hello"
                    }
                }
                post {
                    success {
                        script {
                            sh "echo success"
                        }
                    }
                    failure {
                        script {
                            sh "echo failed"
                        }
                    }
                    unstable {
                        script {
                            sh "echo unstable"
                        }
                    }
                }
            }
        }

        stage('Compare Files') {
            steps {
                script {
                    def delimiter = "="

                    // Initialize an array to store keys that do not exist in the second file
                    def not_found = []

                    // Read the content of the first file
                    def file1Content = readFile("$WORKSPACE/np/$np_app_file").trim().split('\n')

                    // Read the content of the second file
                    def file2Content = readFile("$WORKSPACE/pd/$prod_app_file").trim().split('\n')

                    // Calculate the total count of keys in each file
                    def total_keys_file_1 = file1Content.findAll { it.trim() != "" }.size()
                    def total_keys_file_2 = file2Content.findAll { it.trim() != "" }.size()

                    println "Total count of keys in $np_app_file: $total_keys_file_1"
                    println "Total count of keys in $prod_app_file: $total_keys_file_2"

                    // Iterate over the lines of the first file and check if keys exist in the second file
                    file1Content.each { line ->
                        def key = line.split(delimiter)[0].trim()
                        if (!file2Content.find { it.startsWith(key + delimiter) }) {
                            not_found.add(key)
                        }
                    }

                    // Check if any keys were not found in the second file
                    if (not_found.isEmpty()) {
                        echo "All keys from $np_app_file exist in $prod_app_file."
                    } else {
                        echo "Keys that do not exist in $prod_app_file:"
                        not_found.each { key ->
                            echo key
                        }
                    }
                }
            }
        }
    }
}
